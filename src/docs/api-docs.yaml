openapi: 3.0.0
info:
  title: Node Auth JWT MySQL API
  version: 1.0.0
  description: API con autenticación JWT y roles (USER / ADMIN) usando Node.js, Express y MySQL

servers:
  - url: http://localhost:4000/api
    description: Servidor local

paths:
  # ===== AUTH =====
  /auth/register:
    post:
      summary: Registro de nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                roleName:
                  type: string
                  description: "Opcional, por defecto USER"
      responses:
        201:
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object

  /auth/login:
    post:
      summary: Iniciar sesión y obtener tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login exitoso con tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object

  /auth/refresh:
    post:
      summary: Renovar access token usando refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Token renovado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object

  /auth/logout:
    post:
      summary: Cerrar sesión
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # ===== USERS =====
  /users:
    get:
      summary: Lista de usuarios (solo ADMIN)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        username:
                          type: string
                        email:
                          type: string
                        role:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        status:
                          type: string
                          enum:
                            - ACTIVE
                            - INACTIVE
                            - SUSPENDED
                            - BLOCKED

  /users/{id}:
    get:
      summary: Obtener usuario por ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario encontrado
        404:
          description: Usuario no encontrado

  /users/username/{username}:
    get:
      summary: Obtener usuario por username (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        200:
          description: Usuario encontrado
        404:
          description: Usuario no encontrado

  /users/email/{email}:
    get:
      summary: Obtener usuario por email (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        200:
          description: Usuario encontrado
        404:
          description: Usuario no encontrado

  # ===== PROFILE =====
  /auth/actualizar:
    get:
      summary: Obtener perfil del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        200:
          description: Perfil obtenido correctamente
    put:
      summary: Actualizar nombre y email del usuario autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        200:
          description: Perfil actualizado correctamente

  /auth/password:
    put:
      summary: Cambiar contraseña del usuario autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Contraseña actualizada correctamente

  # ===== USER STATUS MANAGEMENT =====
  /users/{id}/activate:
    put:
      summary: Activar usuario (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario activado correctamente

  /users/{id}/deactivate:
    put:
      summary: Desactivar usuario (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario desactivado correctamente

  /users/{id}/suspend:
    put:
      summary: Suspender usuario (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario suspendido correctamente

  /users/{id}/block:
    put:
      summary: Bloquear usuario (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Usuario bloqueado correctamente

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
